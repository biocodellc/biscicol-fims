buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenLocal()
    }
    dependencies {
        classpath "org.biocode:gradle-fims:1.0.0"
    }
}

apply plugin: "application"
apply plugin: "org.biocode.fims-web"


ext.fimsCommonsVersion = "0.0.1"

// set default values
ext.biocodeFimsCommonsDir = hasProperty("biocodeFimsCommonsDir") ? biocodeFimsCommonsDir : null

repositories {
    mavenCentral()
    mavenLocal()
}

// this is necessary for the subprojects.each closure to work correctly when dealing with the server configuration dependencies
subprojects.each { subproject -> evaluationDependsOn(subproject.path) }

dependencies {
    server 'org.glassfish.jersey.media:jersey-media-multipart:2.25'

    server('org.glassfish.jersey.ext:jersey-spring3:2.25') {
        exclude module: 'bean-validator'
        exclude module: 'asm-all-repackaged'
    }
    server 'javax.servlet:servlet-api:2.4'
    server 'com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:2.6.0'
    server 'com.googlecode.json-simple:json-simple:1.1.1'
    server 'org.springframework.data:spring-data-jpa:1.10.1.RELEASE'
    server group: 'org.hibernate.javax.persistence', name: 'hibernate-jpa-2.1-api', version: '1.0.0.Final'
    server 'org.slf4j:slf4j-log4j12:1.7.19'
    server 'org.apache.commons:commons-digester3:3.2'
    server 'commons-cli:commons-cli:1.2'

    server group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'
    compile composite.resolveDependency("org.biocode:biocode-fims-commons:${fimsCommonsVersion}", biocodeFimsCommonsDir)

    doclet fileTree(dir: 'swagger', include: ['swagger-doclet-*'])

    additionalSources(group: 'org.springframework.data', name: 'spring-data-commons', version: '1.10.1.RELEASE', classifier: 'sources') {
        transitive = false
    }
    additionalSources(group: 'org.biocode', name: 'biocode-fims-commons', version: "${fimsCommonsVersion}") {
        transitive = false
    }

    testCompile "junit:junit-dep:4.10"

    subprojects.each {
        project.configurations.server.dependencies.addAll(it.configurations.server.dependencies)
    }
}

//=============================
//= ssh configuration
//=============================

// jetty ssh plugin
remotes {
    biscicol {
        host = 'biscicol.org'
        user = biscicolUser
        password = biscicolPassword
    }
}

//=============================
//= application configuration
//=============================
mainClassName = "biocode.fims.run.FusekiDataExporter"

distributions {
    main {
        contents {
            into('lib') {
                from configurations.server
            }
        }
    }
}

startScripts {
    classpath = files(jar.archivePath, configurations.server, configurations.runtime)
}

task ezidUpdate(type: JavaExec) {
    classpath = configurations.server + configurations.compile + sourceSets.main.runtimeClasspath

    main = "biocode.fims.run.EzidUpdator"
}

//=============================
//= deployment configuration
//=============================

updateDependencies {
    remote = remotes.biscicol
    location = remoteLibsDirectory
}

updateDependenciesDev {
    remote = remotes.biscicol
    location = remoteDevLibsDirectory
}

deployFims {
    remoteLibsDir = remoteLibsDirectory
    remoteWarDir = remoteWarDirectory
}

deployFimsDev {
    remoteLibsDir = remoteDevLibsDirectory
    remoteWarDir = remoteWarDevDirectory
}

deployFimsLocal {
    deployDir = localWarDirectory
}

//task restartFims(type: RestartRemoteJettyTask) {
//    group = 'Fims'
//    jettyPath = biscicolJettyPath
//    remote = remotes.biscicol
//}
//
//task restartFimsDev(type: RestartRemoteJettyTask) {
//    group = 'Fims'
//    jettyPath = biscicolJettyDevPath
//    remote = remotes.biscicol
//}

//=============================
//= Rest api docs configuration
//=============================

generateRestApiDocs {
    swagger {
        apiInfo = "${projectDir}/swagger/api-info.json"
        apiVersions = ["v1.1", "v2"]
        apiBasePath = "/biocode-fims/rest/"
    }
}

//===========================
//= js configuration
//===========================

// specify files that require a specific loading order
ext.externLibsOrdered = ["${webAppDir}/js/externalLibs/lodash.js", "${webAppDir}/js/externalLibs/papaparse.min.js",
                         "${webAppDir}/js/externalLibs/xlsx.min.js", "${webAppDir}/js/externalLibs/xlsx-reader.js"]
javascript.source {
    externLibs {
        js {
            srcDir "src/main/web/js/externalLibs"
            include "*.js"
            // exclude any file that is in the externLibsOrdered list
            exclude {
                it.file in files(externLibsOrdered).files
            }
        }
    }
    app {
        js {
            srcDir "src/main/web/app"
            include "**/*.js"
            exclude "app.js"
            exclude "app.module.js"
            exclude "**/module.js"
        }
    }
    js {
        js {
            srcDir "src/main/web/js"
            include "*.js"
        }
    }
    modules {
        js {
            srcDir "src/main/web/app"
            include "**/module.js"
        }
    }
}

combineJs {
    encoding = "UTF-8"
    source = files("${webAppDirName}/app/app.module.js", javascript.source.modules.js.files, javascript.source.app.js.files, javascript.source.js.js.files)
    dest = file("${webAppDirName}/js/all.js")
}

jsExternalLibs {
    source = externLibsOrdered + javascript.source.externLibs.js.files
    closure {
        compilerOptions.language = "ECMASCRIPT5"
        warningLevel = "QUIET"
    }
}

jsApp {
    source = files("src/main/web/app/app.module.js", javascript.source.modules.js.files, javascript.source.app.js.files, javascript.source.js.js.files)
    closure {
        compilerOptions.language = "ECMASCRIPT5"
    }
}
